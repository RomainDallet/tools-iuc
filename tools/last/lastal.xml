<tool id="last_al" name="LASTal" version="@LAST_CONDA_VERSION@+galaxy0" python_template_version="3.5">

    <description>finds local alignments between query sequences, and reference sequences.</description>

    <macros>
        <import>macros_last.xml</import>
    </macros>

    <requirements>
        <requirement type="package" version="@LAST_CONDA_VERSION@">last</requirement>
    </requirements>

    <command detect_errors="exit_code"><![CDATA[
        lastal
        -Q $lastal.misc_input_format        
        -f $lastal.output_format
        -j $lastal.ouput_type        

        -R $lastal.repeats_misc.uppercase_misc$lastal.repeats_misc.simple_repeat_misc

        -p $lastal.isprotein.schoring_schemes.score_matrix
        -X $lastal.isprotein.schoring_schemes.score_opt.match_mismatch
        -x $lastal.isprotein.schoring_schemes.score_opt.max_score_pre_gap
        -y $lastal.isprotein.schoring_schemes.score_opt.max_score_gapless
        -z $lastal.isprotein.schoring_schemes.score_opt.max_score_gapped
        -d $lastal.isprotein.schoring_schemes.score_opt.min_score_gapless
        -e $lastal.isprotein.schoring_schemes.score_opt.min_score_gapped

        -a $lastal.isprotein.schoring_schemes.cost_opt.gap_existence_cost
        -b $lastal.isprotein.schoring_schemes.cost_opt.gap_extension_cost
        -A $lastal.isprotein.schoring_schemes.cost_opt.insertion_existence_cost
        -B $lastal.isprotein.schoring_schemes.cost_opt.insertion_extension_cost

        -D $lastal.evalue_opt.query_letters

        -m $lastal.init_match_opt.multiplicity
        -l $lastal.init_match_opt.min_length
        -L $lastal.init_match_opt.max_length
        -k $lastal.init_match_opt.init_step
        -W $lastal.init_match_opt.init_size

        -s $lastal.misc_opt.misc_strand
        -S $lastal.misc_opt.score_matrix_apply
        -K $lastal.misc_opt.omit_align
        -C $lastal.misc_opt.omit_gap
        -T $lastal.misc_opt.type_alignment
        -w $lastal.misc_opt.sup_repeat
        -g $lastal.misc_opt.gamma_centroid

        -P \${GALAXY_SLOTS:-1}

        ref_genome

        '$int_fasta'

        > '$result'
    ]]></command>
    <!--
        lastal
        -i

        -E
        -r
        -q
        -M
        -N
    -->
    <inputs>
        <param name="int_fasta" type="data" format="fasta" label="Sequence of interest fasta file" />

        <section name="lastal" title="Lastal arguments" expanded="true">
            <param name="misc_input_format" argument="-Q" type="select" multiple="false" label="Input format">
                <option value="0" selected="true">fasta or fastq-ignore</option>
                <option value="1">fastq-sanger</option>
                <option value="2">fastq-solexa</option>
                <option value="3">fastq-illumina</option>
                <option value="4">prb</option>
                <option value="5">PSSM</option>
            </param>            
            <param name="output_format" argument="-f" type="select" multiple="false" label="Output format">
                <option value="MAF" selected="true">MAF</option>
                <option value="TAB">TAB</option>
                <option value="BlastTab">BlastTab</option>
                <option value="BlastTab+">BlastTab+</option>
            </param>
            <param name="ouput_type" argument="-j" type="select" multiple="false" label="Output type">
                <option value="0">Match counts</option>
                <option value="1">Gapless</option>
                <option value="2">Redundant gapped</option>
                <option value="3" selected="true">Gapped</option>
                <option value="4">Column ambiguity estimates</option>
                <option value="5">Gamma-centroid</option>
                <option value="6">LAMA</option>
                <option value="7">Expected counts</option>
            </param>

            <conditional name="isprotein">
                <param name="lastal_protein" type="select" multiple="false" label="The sequences are :">
                    <option value="dna" selected="true">DNA</option>
                    <option value="prot">Proteins (-p)</option>
                </param>
                <when value="dna">
                    <conditional name="schoring_schemes">
                            <param name="score_matrix" argument="-p" type="select" multiple="false" label="Match/mismatch score matrix.">
                                <option value="AT77">AT77</option>
                                <option value="ATMAP">ATMAP</option>
                                <option value="BISF">BISF</option>
                                <option value="BISR">BISR</option>
                                <option value="BL62">BLOSUM62</option>
                                <option value="BL80" selected="true">BLOSUM80</option>
                                <option value="HOXD70">HOXD70</option>
                                <option value="MIQS">MIQS</option>
                                <option value="PAM10">PAM10</option>
                                <option value="PAM30">PAM30</option>                    
                                <!--<option value="scoreFile">Other score matrix</option>-->
                            </param>
                            <when value="AT77">
                                <expand macro="score_macro"/>
                                <expand macro="cost_macro" a="15" b="2"/>
                            </when>
                            <when value="ATMAP">
                                <expand macro="score_macro"/>
                                <expand macro="cost_macro" a="24" b="6"/>
                            </when>                    
                            <when value="BISF">
                                <expand macro="score_macro"/>
                                <expand macro="cost_macro" a="21" b="9"/>
                            </when>
                            <when value="BISR">
                                <expand macro="score_macro"/>
                                <expand macro="cost_macro" a="21" b="9"/>
                            </when>                    
                            <when value="BL62">
                                <expand macro="score_macro"/>
                                <expand macro="cost_macro" a="11" b="2"/>
                            </when>
                            <when value="BL80">
                                <expand macro="score_macro"/>
                                <expand macro="cost_macro" a="7" b="1"/>
                            </when>
                            <when value="HOXD70">
                                <expand macro="score_macro"/>
                                <expand macro="cost_macro" a="400" b="30"/>
                            </when>
                            <when value="MIQS">
                                <expand macro="score_macro"/>
                                <expand macro="cost_macro" a="13" b="2"/>
                            </when>
                            <when value="PAM10">
                                <expand macro="score_macro"/>
                                <expand macro="cost_macro" a="20" b="3"/>
                            </when>
                            <when value="PAM30">
                                <expand macro="score_macro"/>
                                <expand macro="cost_macro" a="13" b="3"/>
                            </when>             
                            <!--
                            <when value="scoreFile">
                                <param name="scoreMatrixFile" type="data" format="tabular" label="Score matrix file" />
                                <param name="match_score" argument="-r" type="integer" value="1" label="Match score"/>
                                <param name="mismatch_cost" argument="-q" type="integer" value="1" label="Mismatch cost"/>
                            </when>
                            -->
                    </conditional>
                </when>
                <when value="prot">
                    <conditional name="schoring_schemes">
                        <param name="score_matrix" argument="-p" type="select" multiple="false" label="Match/mismatch score matrix.">
                            <option value="AT77">AT77</option>
                            <option value="ATMAP">ATMAP</option>
                            <option value="BISF">BISF</option>
                            <option value="BISR">BISR</option>
                            <option value="BL62" selected="true">BLOSUM62</option>
                            <option value="BL80">BLOSUM80</option>
                            <option value="HOXD70">HOXD70</option>
                            <option value="MIQS">MIQS</option>
                            <option value="PAM10">PAM10</option>
                            <option value="PAM30">PAM30</option>                  
                            <!--<option value="scoreFile">Other score matrix</option>-->
                        </param>
                        <when value="AT77">
                            <expand macro="score_macro"/>
                            <expand macro="cost_macro" a="15" b="2"/>
                        </when>
                        <when value="ATMAP">
                            <expand macro="score_macro"/>
                            <expand macro="cost_macro" a="24" b="6"/>
                        </when>                    
                        <when value="BISF">
                            <expand macro="score_macro"/>
                            <expand macro="cost_macro" a="21" b="9"/>
                        </when>
                        <when value="BISR">
                            <expand macro="score_macro"/>
                            <expand macro="cost_macro" a="21" b="9"/>
                        </when>                    
                        <when value="BL62">
                            <expand macro="score_macro"/>
                            <expand macro="cost_macro" a="11" b="2"/>
                        </when>
                        <when value="BL80">
                            <expand macro="score_macro"/>
                            <expand macro="cost_macro" a="7" b="1"/>
                        </when>
                        <when value="HOXD70">
                            <expand macro="score_macro"/>
                            <expand macro="cost_macro" a="400" b="30"/>
                        </when>
                        <when value="MIQS">
                            <expand macro="score_macro"/>
                            <expand macro="cost_macro" a="13" b="2"/>
                        </when>
                        <when value="PAM10">
                            <expand macro="score_macro"/>
                            <expand macro="cost_macro" a="20" b="3"/>
                        </when>
                        <when value="PAM30">
                            <expand macro="score_macro"/>
                            <expand macro="cost_macro" a="13" b="3"/>
                        </when>             
                        <!--
                        <when value="scoreFile">
                            <param name="scoreMatrixFile" type="data" format="tabular" label="Score matrix file" />
                            <param name="match_score" argument="-r" type="integer" value="1" label="Match score"/>
                            <param name="mismatch_cost" argument="-q" type="integer" value="1" label="Mismatch cost"/>
                        </when>
                        -->
                    </conditional>
                </when>
            </conditional>

            <section name="repeats_misc" title="Specify lowercase-marking of repeats. (-R)" expanded="false">
                <param name="uppercase_misc" type="select" multiple="false" label="Input sequences to uppercase.">
                    <option value="0">Convert the input sequences to uppercase while reading them.(0)</option>
                    <option value="1" selected="true">Keep any lowercase in the input sequences.(1)</option>
                </param>
                <param name="simple_repeat_misc" type="select" multiple="false" label="Check for simple repeats.">
                    <option value="0" selected="true">Do not check for simple repeats.(0)</option>
                    <option value="1">Convert simple repeats to lowercase.(1)</option>
                    <option value="2">Convert simple DNA repeats to lowercase.(2)</option>
                </param>
            </section>

            <section name="evalue_opt" title="E-value options" expanded="false">
                <param name="query_letters" type="integer" value="1000000" label="Query letters per random alignment (-D)"/>
                <!--<param name="max_eg2" type="integer" value="1e+18" label="Maximum expected alignments per square giga (-E)"/>-->
            </section>

            <section name="init_match_opt" title="Initial-match options" expanded="false">
                <param name="multiplicity" argument="-m" type="integer" value="10" label="Maximum initial matches per query position"/>
                <param name="min_length" argument="-l" type="integer" value="1" label="Minimum length for initial matches"/>
                <!-- Infinity -->
                <param name="max_length" argument="-L" type="integer" value="999999999" label="Maximum length for initial matches"/>
                <param name="init_step" argument="-k" type="integer" value="1" label="Use initial matches starting at every k-th position in each query"/>
                <param name="init_size" argument="-W" type="integer" value="1" label="Use minimum positions in sliding windows of W consecutive positions"/>
            </section>

            <section name="misc_opt" title="Miscellaneous options" expanded="false">
                <!-- Add condition -p (protein) -->
                <param name="misc_strand" argument="-s" type="select" multiple="false" label="Strand">
                    <option value="0">Reverse</option>
                    <option value="1">Forward</option>
                    <option value="2" selected="true">Both</option> 
                    <!-- 2 for DNA, 1 for protein -->
                </param>
                <param name="score_matrix_apply" argument="-S" type="select" multiple="false" label="Score matrix applies to forward strand of :">
                    <option value="0" selected="true">Reference</option>
                    <option value="1">Query</option>
                </param>
                <param name="omit_align" argument="-K" type="integer" value="0" label="Omit alignments whose query range lies in >= K others with > score"/>
                <param name="omit_gap" argument="-C" type="integer" value="0" label="Omit gapless alignments in >= C others with > score-per-length"/>
                <!--<param name="omit_gap" argument="-M" type="integer" value="" label="Find minimum-difference alignments (faster but cruder)"/>-->

                <param name="type_alignment" argument="-T" type="select" multiple="false" label="Type of alignment">
                    <option value="0" selected="true">Local</option>
                    <option value="1">Overlap</option>
                </param>
                <param name="max_gap_align" argument="-n" type="integer" value="10" label="Maximum gapless alignments per query position"/>
                <!--<param name="max_gap_align" argument="-N" type="integer" value="0" label="Stop after the first N alignments per query strand"/>-->

                <!-- Condition lastdb : 2 if lastdb -c and Q<5 -->
                <param name="mask_lowercase" argument="-u" type="select" multiple="false" label="Mask lowercase during extensions.">
                    <option value="0" selected="true">Never.(0)</option>
                    <option value="1">Gapless.(1)</option>
                    <option value="2">Gapless+postmask.(2)</option>
                    <option value="3">Always.(3)</option>
                </param>
                <param name="sup_repeat" argument="-w" type="integer" value="1000" label="Suppress repeats inside exact matches, offset by less or equal this distance. Use 0 to set this off" help="Use 0 to turn this off"/>

                <!-- https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi -->
                <!-- Condition if ADN vs prot and -F -->
                <param name="genetic_code" argument="-G" type="select" multiple="false" label="Genetic code.">
                    <option value="1" selected="true">Standard Code</option>
                    <option value="2">Vertebrate Mitochondrial Code</option>
                    <option value="3">Yeast Mitochondrial Code</option>
                    <option value="4">Mold, Protozoan, and Coelenterate Mitochondrial Code and the Mycoplasma/Spiroplasma</option>
                    <option value="5">Invertebrate Mitochondrial Code</option>
                    <option value="6">Ciliate, Dasycladacean and Hexamita Nuclear Code</option>
                    <option value="9">Echinoderm and Flatworm Mitochondrial Code</option>
                    <option value="10">Euplotid Nuclear Code</option>
                    <option value="11">Bacterial, Archaeal and Plant Plastid Code</option>
                    <option value="12">Alternative Yeast Nuclear Code</option>
                    <option value="13">Ascidian Mitochondrial Code</option>
                    <option value="14">Alternative Flatworm Mitochondrial Code</option>
                    <option value="16">Chlorophycean Mitochondrial Code</option>
                    <option value="21">Trematode Mitochondrial Code</option>
                    <option value="22">Scenedesmus obliquus Mitochondrial Code</option>
                    <option value="23">Thraustochytrium Mitochondrial Code</option>
                    <option value="24">Pterabranchia Mitochondrial Code</option>
                    <option value="25">Candidate Division SR1 and Gracilibacteria Code</option>
                    <option value="26">Pachysolen tannophilus Nuclear Code</option>
                    <option value="27">Karyorelict Nuclear Code</option>
                    <option value="28">Condylostoma Nuclear Code</option>
                    <option value="29">Mesodinium Nuclear Code</option>
                    <option value="30">Peritrich Nuclear Code</option>
                    <option value="31">Blastocrithidia Nuclear Code</option>
                    <option value="33">Cephalodiscidae Mitochondrial UAA-Tyr Code</option>
                    <!-- Add filename option with <repeat> -->
                </param>

                <!--<param name="temperature" argument="-t" type="integer" value="1/lambda" label="Temperature for calculating probabilities"/>-->
                <param name="gamma_centroid" argument="-g" type="integer" value="1" label="Gamma parameter for gamma-centroid and LAMA"/>

            </section>

            <!-- Last-split section -->
            <param name="last_split" type="boolean" truevalue="| last-split" falsevalue="" checked="false" label="Looks for a unique best alignment for each part of each query." help="It allows different parts of one query to match different parts of the genome, which may happen due to rearrangements."/>
        </section>
    </inputs>

    <outputs>
        <data name="result" format="maf" />
    </outputs>

    <tests>
        <test>
            <param name="int_fasta" value="fuguMito.fa" />
            <output name="result" file="humanMito-fuguMito.maf" />
        </test>
    </tests>

    <help><![CDATA[
        LAST finds similar regions between sequences.

        The main technical innovation is that LAST finds initial matches based on their multiplicity, instead of using a fixed length (e.g. BLAST uses 11-mers). To find these variable-length matches, it uses a suffix array (inspired by Vmatch). To achieve high sensitivity, it uses a spaced suffix array (or subset suffix array), analogous to spaced seeds (or subset seeds).

        LAST can:
            - Handle big sequence data, e.g:
                - Compare two vertebrate genomes.
                - Align billions of DNA reads to a genome.
            - Indicate the reliability of each aligned column.
            - Use sequence quality data properly.
            - Compare DNA to proteins, with frameshifts.
            - Compare PSSMs to sequences.
            - Calculate the likelihood of chance similarities between random sequences.
            - Do split and spliced alignment.
            - Train alignment parameters for unusual kinds of sequence (e.g. nanopore).

    ]]></help>
    <citations></citations>
</tool>
